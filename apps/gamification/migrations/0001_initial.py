# Generated by Django 5.2.1 on 2025-07-25 06:54

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('lines', '0001_initial'),
        ('tracking', '0002_routesegment'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('icon', models.CharField(help_text='Icon identifier or emoji', max_length=50, verbose_name='icon')),
                ('achievement_type', models.CharField(choices=[('trips', 'Number of Trips'), ('distance', 'Distance Traveled'), ('streak', 'Day Streak'), ('eco', 'Environmental Impact'), ('social', 'Social Engagement'), ('special', 'Special Achievement'), ('level', 'Level Based')], max_length=30, verbose_name='type')),
                ('threshold_value', models.IntegerField(default=0, help_text='Value needed to unlock', verbose_name='threshold value')),
                ('points_reward', models.IntegerField(default=50, verbose_name='points reward')),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20, verbose_name='rarity')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('order', models.IntegerField(default=0, verbose_name='display order')),
            ],
            options={
                'verbose_name': 'achievement',
                'verbose_name_plural': 'achievements',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('reward_type', models.CharField(choices=[('discount', 'Discount Code'), ('free_ride', 'Free Ride'), ('merchandise', 'Merchandise'), ('donation', 'Charity Donation'), ('special', 'Special Reward')], max_length=30, verbose_name='reward type')),
                ('points_cost', models.IntegerField(verbose_name='points cost')),
                ('quantity_available', models.IntegerField(default=-1, help_text='-1 for unlimited', verbose_name='quantity available')),
                ('quantity_redeemed', models.IntegerField(default=0, verbose_name='quantity redeemed')),
                ('valid_from', models.DateTimeField(verbose_name='valid from')),
                ('valid_until', models.DateTimeField(verbose_name='valid until')),
                ('image', models.ImageField(blank=True, null=True, upload_to='rewards/', verbose_name='image')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('partner_name', models.CharField(blank=True, max_length=100, verbose_name='partner name')),
            ],
            options={
                'verbose_name': 'reward',
                'verbose_name_plural': 'rewards',
                'ordering': ['points_cost', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('challenge_type', models.CharField(choices=[('individual', 'Individual Challenge'), ('community', 'Community Challenge'), ('route', 'Route Challenge'), ('eco', 'Eco Challenge')], max_length=30, verbose_name='challenge type')),
                ('start_date', models.DateTimeField(verbose_name='start date')),
                ('end_date', models.DateTimeField(verbose_name='end date')),
                ('target_value', models.IntegerField(help_text='Target to achieve', verbose_name='target value')),
                ('current_value', models.IntegerField(default=0, verbose_name='current value')),
                ('points_reward', models.IntegerField(verbose_name='points reward')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_completed', models.BooleanField(default=False, verbose_name='is completed')),
                ('achievement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='challenges', to='gamification.achievement')),
                ('target_line', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lines.line')),
                ('target_stops', models.ManyToManyField(blank=True, related_name='challenges', to='lines.stop')),
            ],
            options={
                'verbose_name': 'challenge',
                'verbose_name_plural': 'challenges',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('trip_complete', 'Trip Completed'), ('achievement', 'Achievement Unlocked'), ('daily_bonus', 'Daily Bonus'), ('streak_bonus', 'Streak Bonus'), ('referral', 'Referral Bonus'), ('special_event', 'Special Event'), ('penalty', 'Penalty')], max_length=30, verbose_name='transaction type')),
                ('points', models.IntegerField(verbose_name='points')),
                ('description', models.CharField(max_length=255, verbose_name='description')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='metadata')),
                ('achievement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='point_transactions', to='gamification.achievement')),
                ('trip', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='point_transactions', to='tracking.trip')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_transactions', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'point transaction',
                'verbose_name_plural': 'point transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.IntegerField(default=0, verbose_name='total points')),
                ('current_level', models.IntegerField(default=1, verbose_name='current level')),
                ('experience_points', models.IntegerField(default=0, verbose_name='experience points')),
                ('total_trips', models.IntegerField(default=0, verbose_name='total trips')),
                ('total_distance', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='total distance')),
                ('carbon_saved', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='carbon saved (kg)')),
                ('current_streak', models.IntegerField(default=0, verbose_name='current streak')),
                ('longest_streak', models.IntegerField(default=0, verbose_name='longest streak')),
                ('last_trip_date', models.DateField(blank=True, null=True, verbose_name='last trip date')),
                ('receive_achievement_notifications', models.BooleanField(default=True, verbose_name='receive achievement notifications')),
                ('display_on_leaderboard', models.BooleanField(default=True, verbose_name='display on leaderboard')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gamification_profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user profile',
                'verbose_name_plural': 'user profiles',
            },
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_spent', models.IntegerField(verbose_name='points spent')),
                ('redemption_code', models.CharField(max_length=50, unique=True, verbose_name='redemption code')),
                ('is_used', models.BooleanField(default=False, verbose_name='is used')),
                ('used_at', models.DateTimeField(blank=True, null=True, verbose_name='used at')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='expires at')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redemptions', to='gamification.reward', verbose_name='reward')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user reward',
                'verbose_name_plural': 'user rewards',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('all_time', 'All Time')], max_length=20, verbose_name='period type')),
                ('period_start', models.DateField(verbose_name='period start')),
                ('period_end', models.DateField(blank=True, null=True, verbose_name='period end')),
                ('points', models.IntegerField(default=0, verbose_name='points')),
                ('trips', models.IntegerField(default=0, verbose_name='trips')),
                ('distance', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='distance')),
                ('rank', models.IntegerField(default=0, verbose_name='rank')),
                ('previous_rank', models.IntegerField(blank=True, null=True, verbose_name='previous rank')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'leaderboard entry',
                'verbose_name_plural': 'leaderboard entries',
                'ordering': ['period_type', '-points', 'rank'],
                'indexes': [models.Index(fields=['period_type', '-points'], name='gamificatio_period__136c37_idx'), models.Index(fields=['user', 'period_type'], name='gamificatio_user_id_6e060c_idx')],
                'unique_together': {('user', 'period_type', 'period_start')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True, verbose_name='unlocked at')),
                ('progress', models.IntegerField(default=0, help_text='Progress towards achievement', verbose_name='progress')),
                ('is_notified', models.BooleanField(default=False, verbose_name='user notified')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='gamification.achievement', verbose_name='achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user achievement',
                'verbose_name_plural': 'user achievements',
                'ordering': ['-unlocked_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.IntegerField(default=0, verbose_name='progress')),
                ('is_completed', models.BooleanField(default=False, verbose_name='is completed')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('points_earned', models.IntegerField(default=0, verbose_name='points earned')),
                ('is_rewarded', models.BooleanField(default=False, verbose_name='is rewarded')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='gamification.challenge', verbose_name='challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user challenge',
                'verbose_name_plural': 'user challenges',
                'unique_together': {('user', 'challenge')},
            },
        ),
    ]
